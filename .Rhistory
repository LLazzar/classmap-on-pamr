xr<- t(apply(t(xr), 1, function(x) x / sdr))
pairwiser=dist(xr)
pairwiser= as.matrix(dist(xr)^2)
mds=cmdscale(pairwiser, k=2)
plot(mds, pch=20)
posid
# loading R function need ####
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
# Main code of examples ####
## a generic microarray dataset form local ####
library(foreign) #to read WEKA arff format
datar=read.arff("sample_datasets/Ovarian.arff")
str(datar) #need manipulation to get to work with pamR
data=list() #pamr wants list
data$y=datar[,ncol(datar)]
data$x=datar[,1:(ncol(datar)-1)]
data$x=t(data$x) #pamr wants nvariable x obervations
str(data$x)
str(data$x)
str(data$y)
#fitting
library(pamr)
?pamr.train
pamr=pamr.train(data) #data=SRBCT as pamr paper
pamr #chose a threshold by eye and get index
pamr$prob
yhat=pamr$yhat[3] #choose threshold 6.763
str(pamr$prob) #it's a 3d dim array [i,j,k]=[nobvs,class,thresholdindex]
pprob=pamr$prob[,,3]
ytrue=SRBCT$y
pamr #chose a threshold by eye and get index
#producing the output for classmap
vcrpamr=vcr.pamr.train(data=data, pamrfit=pamr, threshold_index = 9) #data is feeded in same format that pam accepts
#producing the output for classmap
vcrpamr=vcr.pamr.train(data=data, pamrfit=pamr, threshold = 9) #data is feeded in same format that pam accepts
vcrpamr$farness
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set seed for reproducibility
set.seed(42)
# Generate 5 different groups with different variances
group1 <- rnorm(100, mean = 10, sd = 2)
group2 <- rnorm(100, mean = 20, sd = 4)
group3 <- rnorm(100, mean = 30, sd = 6)
group4 <- rnorm(100, mean = 40, sd = 8)
group5 <- rnorm(100, mean = 50, sd = 10)
# Combine the data into a single data frame
data <- data.frame(
Value = c(group1, group2, group3, group4, group5),
Group = factor(rep(1:5, each = 100))
)
# Visualize the raw data
ggplot(data, aes(x = Group, y = Value, group = Group)) +
geom_boxplot() +
ggtitle("Raw Data") +
theme_minimal()
# Divide by the median within each group
data_normalized <- data %>%
group_by(Group) %>%
mutate(NormalizedValue = Value / median(Value))
# Visualize the normalized data
ggplot(data_normalized, aes(x = Group, y = NormalizedValue, group = Group)) +
geom_boxplot() +
ggtitle("Data Divided by Median") +
theme_minimal()
# Divide by the median within each group
data_normalized <- data %>%
group_by(Group) %>%
mutate(NormalizedValue = Value / mean(Value))
# Visualize the normalized data
ggplot(data_normalized, aes(x = Group, y = NormalizedValue, group = Group)) +
geom_boxplot() +
ggtitle("Data Divided by Median") +
theme_minimal()
# Set seed for reproducibility
set.seed(42)
# Generate 5 different groups with different variances
group1 <- rnorm(100, mean = 10, sd = 2)
group2 <- rnorm(100, mean = 20, sd = 4)
group3 <- rnorm(100, mean = 30, sd = 6)
group4 <- rnorm(100, mean = 40, sd = 8)
group5 <- rnorm(100, mean = 50, sd = 10)
# Combine the data into a single data frame
data <- data.frame(
Value = c(group1, group2, group3, group4, group5),
Group = factor(rep(1:5, each = 100))
)
# Visualize the raw data
ggplot(data, aes(x = Group, y = Value, group = Group)) +
geom_boxplot() +
ggtitle("Raw Data") +
theme_minimal()
# Divide by the median within each group
data_normalized <- data %>%
group_by(Group) %>%
mutate(NormalizedValue = Value / mean(Value))
# Visualize the normalized data
ggplot(data_normalized, aes(x = Group, y = NormalizedValue, group = Group)) +
geom_boxplot() +
ggtitle("Data Divided by Median") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Set seed for reproducibility
set.seed(42)
# Generate 5 different groups with different variances
group1 <- rnorm(100, mean = 10, sd = 2)
group2 <- rnorm(100, mean = 20, sd = 4)
group3 <- rnorm(100, mean = 30, sd = 6)
group4 <- rnorm(100, mean = 40, sd = 8)
group5 <- rnorm(100, mean = 50, sd = 10)
# Combine the data into a single data frame
data <- data.frame(
Value = c(group1, group2, group3, group4, group5),
Group = factor(rep(1:5, each = 100))
)
# Visualize the raw data
ggplot(data, aes(x = Group, y = Value, group = Group)) +
geom_boxplot() +
ggtitle("Raw Data") +
theme_minimal()
# Divide by the median within each group
data_normalized_median <- data %>%
group_by(Group) %>%
mutate(NormalizedValue = Value / median(Value))
# Visualize the normalized data (dividing by median)
ggplot(data_normalized_median, aes(x = Group, y = NormalizedValue, group = Group)) +
geom_boxplot() +
ggtitle("Data Divided by Median") +
theme_minimal()
# Divide by the mean within each group
data_normalized_mean <- data %>%
group_by(Group) %>%
mutate(NormalizedValue = Value / mean(Value))
# Visualize the normalized data (dividing by mean)
ggplot(data_normalized_mean, aes(x = Group, y = NormalizedValue, group = Group)) +
geom_boxplot() +
ggtitle("Data Divided by Mean") +
theme_minimal()
# loading R function need ####
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
# loading R function need ####
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
# Main code of examples ####
## a generic microarray dataset form local ####
library(foreign) #to read WEKA arff format
datar=read.arff("sample_datasets/SRBCT.arff")
str(datar) #need manipulation to get to work with pamR
data=list() #pamr wants list
data$y=datar[,ncol(datar)]
data$x=datar[,1:(ncol(datar)-1)]
data$x=t(data$x) #pamr wants nvariable x obervations
str(data$x)
str(data$y)
#fitting
library(pamr)
?pamr.train
pamr=pamr.train(data) #data=SRBCT as pamr paper
pamr #chose a threshold by eye and get index
pamr$prob
yhat=pamr$yhat[3] #choose threshold 6.763
str(pamr$prob) #it's a 3d dim array [i,j,k]=[nobvs,class,thresholdindex]
pprob=pamr$prob[,,3]
ytrue=SRBCT$y
#producing the output for classmap
vcrpamr=vcr.pamr.train(data=data, pamrfit=pamr, threshold = 8) #data is feeded in same format that pam accepts
#silhouette visual plot
library(classmap)
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
pamr #chose a threshold by eye and get index
#producing the output for classmap
vcrpamr=vcr.pamr.train(data=data, pamrfit=pamr, threshold = 6.5) #data is feeded in same format that pam accepts
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
pamrcv=pamr.cv(pamr,data)
pamrcv
?pamr.train
?pamr.predict
str(datar) #need manipulation to get to work with pamR
train_indices <- sample(nrow(data), nrow(data) * 0.8)  # 70% for training
View(datar)
View(datar)
train_indices <- sample(nrow(datar), nrow(data) * 0.8)  # 70% for training
train_indices <- sample(nrow(datar), nrow(datar) * 0.8)  # 70% for training
traindata$y=datar[train_indices,ncol(datar)]
traindata$x=datar[train_indices,1:(ncol(datar)-1)]
traindata=list() #pamr wants list
traindata$y=datar[train_indices,ncol(datar)]
traindata$x=datar[train_indices,1:(ncol(datar)-1)]
str(data$x)
str(data$y)
testdata=list()
traindata$y=datar[-train_indices,ncol(datar)]
traindata$x=datar[-train_indices,1:(ncol(datar)-1)]
data$x=t(data$x) #pamr wants nvariable x obervations
str(data$x)
str(data$y)
View(testdata)
testdata=list()
traindata$y=datar[-train_indices,ncol(datar)]
library(foreign) #to read WEKA arff format
datar=read.arff("sample_datasets/SRBCT.arff")
str(datar) #need manipulation to get to work with pamR
train_indices <- sample(nrow(datar), nrow(datar) * 0.8)  # 70% for training
traindata=list() #pamr wants list
traindata$y=datar[train_indices,ncol(datar)]
traindata$x=datar[train_indices,1:(ncol(datar)-1)]
data$x=t(data$x) #pamr wants nvariable x obervations
View(traindata)
str(data$x)
str(data$y)
testdata=list()
testdata$y=datar[-train_indices,ncol(datar)]
testdata$x=datar[-train_indices,1:(ncol(datar)-1)]
data$x=t(data$x) #pamr wants nvariable x obervations
str(data$x)
str(data$y)
str(testdata$x)
#fitting
library(pamr)
?pamr.train
pamr=pamr.train(traindata) #data=SRBCT as pamr paper
library(foreign) #to read WEKA arff format
datar=read.arff("sample_datasets/SRBCT.arff")
str(datar) #need manipulation to get to work with pamR
train_indices <- sample(nrow(datar), nrow(datar) * 0.8)  # 70% for training
traindata=list() #pamr wants list
traindata$y=datar[train_indices,ncol(datar)]
traindata$x=datar[train_indices,1:(ncol(datar)-1)]
traindata$x=t(data$x) #pamr wants nvariable x obervations
str(testdata$y)
#fitting
library(pamr)
?pamr.train
pamr=pamr.train(traindata) #data=SRBCT as pamr paper
library(foreign) #to read WEKA arff format
datar=read.arff("sample_datasets/SRBCT.arff")
str(datar) #need manipulation to get to work with pamR
train_indices <- sample(nrow(datar), nrow(datar) * 0.8)  # 70% for training
traindata=list() #pamr wants list
traindata$y=datar[train_indices,ncol(datar)]
traindata$x=datar[train_indices,1:(ncol(datar)-1)]
traindata$x=t(traindata$x) #pamr wants nvariable x obervations
str(traindata$x)
str(traindata$y)
testdata=list()
testdata$y=datar[-train_indices,ncol(datar)]
testdata$x=datar[-train_indices,1:(ncol(datar)-1)]
testdata$x=t(testdata$x) #pamr wants nvariable x obervations
str(testdata$x)
str(testdata$y)
#fitting
library(pamr)
?pamr.train
pamr=pamr.train(traindata) #data=SRBCT as pamr paper
pamr #chose a threshold by eye and get index
#producing the output for classmap
vcrpamr=vcr.pamr.train(data=data, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
# loading R function need ####
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
vcrpamr=vcr.pamr.train(data=data, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
#producing the output for classmap
# loading R function need ####
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
?pamr.train
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
pamrcv
pamrcv=pamr.cv(pamr,traindata)
pamrcv
vcrpamrcv=vcr.pamr.train(data=traindata, pamrfit=pamr, pamrfitcv=pamrcv, threshold = 6)
silplot(vcrpamrcv)
pamrcv=pamr.cv(pamr,traindata)
pamrcv
classmap(vcrpamr, whichclass=4)
classmap(vcrpamr, whichclass=1)
classmap(vcrpamr, whichclass=2)
classmap(vcrpamr, whichclass=3)
classmap(vcrpamr, whichclass=4)
# Predicting test set
?pamr.predict
# Predicting test set
?pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="class")
pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="class")
pred=pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="class")
pred
str(pred)
table(pred, testdata$y)
post=pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="posterior")
post
?pamr.train
# Predicting test set
?pamr.predict
post=pamr.predict(fit=pamrcv, newx=testdata$x, threshold=6, type="posterior")
post=pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="posterior")
post=pamr.predict(fit=pamrcv, newx=testdata$x, threshold=6, type="posterior")
?pamr.cv
centroids=pamrfit$centroids #centroids per variable per class
pamr.predict()
?pamr.predict
?mahalonibs
?mahalanobis
post=pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="posterior")
ypred=pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="class")
table(ypred,testdata$y)
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
# Predicting test set
?pamr.predict
?pamr.train
detach("package:classmap", unload = TRUE)
?classmap::pam.predict
?classmap::pamr.predict
library(classmap)
?pamr.predict
detach("package:classmap", unload = TRUE)
classmap::pamr.predict()
?pamr::pamr.predict
detach("package:pamr", unload = TRUE)
?pamr::pamr.predict
testpost=pamr.predict(fit=pamr, newx=testdata$x, type="posterior") #not needed
# Fitting
library(pamr)
testpost=pamr.predict(fit=pamr, newx=testdata$x, type="posterior") #not needed
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
?pamr.train
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata< = testdata, vcr.pamr.train.out = vcrpamr )
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
?pamr.predict
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
vcrpamrcv=vcr.pamr.train(data=traindata, pamrfit=pamr, pamrfitcv=pamrcv, threshold = 6)
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
silplot(vcrpamrtest) #classLabels = c("EWS","BL","NB","RMS") if you have names
## silhouette visual plot
library(classmap)
silplot(vcrpamrtest) #classLabels = c("EWS","BL","NB","RMS") if you have names
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
silplot(vcrpamrtest) #classLabels = c("EWS","BL","NB","RMS") if you have names
ypred=pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="class")
table(ypred,testdata$y) #all correct
ypred
testdata$y
testpost=pamr.predict(fit=pamr, newx=testdata$x, type="posterior") #not needed
testpost=pamr.predict(fit=pamr, newx=testdata$x, threshold=6, type="posterior") #not needed
testpost
vcrpamr$threshold
ypred=pamr.predict(fit=pamr, newx=testdata$x, threshold=6.201152, type="class")
table(ypred,testdata$y) #all correct
pamr #chose a threshold by eye and get index
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
vcrpamr$threshold
silplot(vcrpamrtest) #classLabels = c("EWS","BL","NB","RMS") if you have names
ypred=pamr.predict(fit=pamr, newx=testdata$x, threshold=6.201152, type="class")
table(ypred,testdata$y) #all correct
classmap(vcrpamrtest, whichclass=4)
classmap(vcrpamrtest, whichclass=1)
classmap(vcrpamrtest, whichclass=2)
classmap(vcrpamrtest, whichclass=3)
classmap(vcrpamrtest, whichclass=4)
classmap(vcrpamrtest, whichclass=1)
str(testdata$y)
str(datar[-1])
str(datar[,ncol(datar)])
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
library(foreign) #to read WEKA arff format
datar=read.arff("sample_datasets/SRBCT.arff")
str(datar) #need manipulation to get to work with pamR
train_indices <- sample(nrow(datar), nrow(datar) * 0.8)  # 70% for training
traindata=list() #pamr wants list
traindata$y=datar[train_indices,ncol(datar)]
traindata$x=datar[train_indices,1:(ncol(datar)-1)]
traindata$x=t(traindata$x) #pamr wants nvariable x obervations
str(traindata$x)
str(traindata$y)
testdata=list()
testdata$y=datar[-train_indices,ncol(datar)]
testdata$x=datar[-train_indices,1:(ncol(datar)-1)]
testdata$x=t(testdata$x) #pamr wants nvariable x obervations
str(testdata$x)
str(testdata$y)
# Fitting
library(pamr)
?pamr.train
pamr=pamr.train(traindata) #data=SRBCT as pamr paper
pamr #chose a threshold by eye and get index
pamr$prob
yhat=pamr$yhat[3] #choose threshold 6.763
str(pamr$prob) #it's a 3d dim array [i,j,k]=[nobvs,class,thresholdindex]
pprob=pamr$prob[,,3]
ytrue=SRBCT$y
pamrcv=pamr.cv(pamr,traindata)
pamrcv
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
pamr$sign.contrast
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6) #data is feeded in same format that pam accepts
vcrpamrcv=vcr.pamr.train(data=traindata, pamrfit=pamr, pamrfitcv=pamrcv, threshold = 6)
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
pamr #chose a threshold by eye and get index
pamr=pamr.train(traindata) #data=SRBCT as pamr paper
pamr #chose a threshold by eye and get index
pamr$prob
yhat=pamr$yhat[3] #choose threshold 6.763
str(pamr$prob) #it's a 3d dim array [i,j,k]=[nobvs,class,thresholdindex]
pprob=pamr$prob[,,3]
ytrue=SRBCT$y
pamrcv=pamr.cv(pamr,traindata)
pamrcv
pamr #chose a threshold by eye and get index
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6.2) #data is feeded in same format that pam accepts
vcrpamrcv=vcr.pamr.train(data=traindata, pamrfit=pamr, pamrfitcv=pamrcv, threshold = 6)
vcrpamrcv=vcr.pamr.train(data=traindata, pamrfit=pamr, pamrfitcv=pamrcv, threshold = 6.2)
vcrpamr=vcr.pamr.train(data=traindata, pamrfit=pamr, threshold = 6.2) #data is feeded in same format that pam accepts
vcrpamrcv=vcr.pamr.train(data=traindata, pamrfit=pamr, pamrfitcv=pamrcv, threshold = 6.2)
## silhouette visual plot
library(classmap)
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
pamrcv
silplot(vcrpamrcv)
classmap(vcrpamr, whichclass=1)
classmap(vcrpamr, whichclass=2)
classmap(vcrpamr, whichclass=3)
classmap(vcrpamr, whichclass=4)
classmap(vcrpamr, whichclass=1)
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
classmap(vcrpamr, whichclass=1)
classmap(vcrpamr, whichclass=3)
classmap(vcrpamr, whichclass=4)
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
classmap(vcrpamr, whichclass=4)
classmap(vcrpamr, whichclass=1)
classmap(vcrpamr, whichclass=2)
classmap(vcrpamr, whichclass=3)
classmap(vcrpamr, whichclass=4)
classmap(vcrpamrcv, whichclass = 1)
classmap(vcrpamrcv, whichclass =2)
classmap(vcrpamrcv, whichclass 3)
classmap(vcrpamrcv, whichclass=3)
classmap(vcrpamrcv, whichclass=4)
silplot(vcrpamr) #classLabels = c("EWS","BL","NB","RMS") if you have names
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
vcrpamr$threshold
ypred=pamr.predict(fit=pamr, newx=testdata$x, threshold=6.473032, type="class")
ypred
table(ypred,testdata$y) #all correct
testpost=pamr.predict(fit=pamr, newx=testdata$x, threshold=6.473032, type="posterior") #not needed
apply(testpost[, , drop = FALSE], 1, which.max)
ypred
str(apply(testpost[, , drop = FALSE], 1, which.max))
str(as.numeric(apply(testpost[, , drop = FALSE], 1, which.max))
str(as.numeric(apply(testpost[, , drop = FALSE], 1, which.max)))
as.numeric(apply(testpost[, , drop = FALSE], 1, which.max))
ypred
as.numeric(ypred)
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
source("feature_code/R/VCR_pamr.R") #to import special vcr function made for pamr(NSC) classifier
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
table(ypred,testdata$y) #all correct
silplot(vcrpamrtest) #classLabels = c("EWS","BL","NB","RMS") if you have names
classmap(vcrpamrtest, whichclass=1)
classmap(vcrpamrtest, whichclass=2)
classmap(vcrpamrtest, whichclass=3)
classmap(vcrpamrtest, whichclass=4)
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamrcv )
#Visualizing on the test set though classmap
vcrpamrtest=vcr.pamr.newdata(newdata = testdata, vcr.pamr.train.out = vcrpamr )
